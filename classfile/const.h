//
// Created by ya on 2022/3/2.
//

#ifndef TINY_JVM_CONST_H
#define TINY_JVM_CONST_H

#include <unordered_map>
#include "String.h"
#include "types.h"
#include <string>
#define ACC_PUBLIC        0x0001            // can be visited by all (CFMI)
#define ACC_PRIVATE        0x0002            // cannot be visited by all (FMI)
#define ACC_PROTECTED    0x0004            // cannot be visited by this (FMI)
#define ACC_STATIC        0x0008            // static (FMI)
#define ACC_FINAL        0x0010            // cannot have a child class (CFMI)
#define ACC_SUPER        0x0020            // when the `invokespecial` instruction used, the father class's method should be treated specially (C)
#define ACC_SYNCHRONIZED    0x0020            // method was synchornized by **monitor** (M)
#define ACC_VOLATILE        0x0040            // volatile (fragile) (F)
#define ACC_BRIDGE        0x0040            // method was generated by compiler (M)
#define ACC_TRANSIENT    0x0080            // cannot be serialized (F)
#define ACC_VARARGS        0x0080            // method has va_args (M)
#define ACC_NATIVE        0x0100            // method is native (M)
#define ACC_INTERFACE    0x0200            // this is an interface, otherwise a class (CI)
#define ACC_ABSTRACT        0x0400            // cannot be instantiation (CMI)
#define ACC_STRICT        0x0800            // method uses **strictfp**, strictfp float format (M)
#define ACC_SYNTHETIC    0x1000            // the code is not generalized by java (by compiler but not the coder) (CFMI)
#define ACC_ANNOTATION    0x2000            // this is an annotation like @Override. at the same time the `ACC_INTERFACE` should also be settled (CI)
#define ACC_ENUM            0x4000            // this is an enum like enum {...} (CFI)
#define ACC_MANDATED        0x8000



static std::unordered_map<u1, std::pair<std::string, int>> bccode_map{    // pair<bccode_name, bccode_eat_how_many_arguments>
        {0x00, {"nop",             0}},
        {0x01, {"aconst_null",     0}},
        {0x02, {"iconst_m1",       0}},
        {0x03, {"iconst_0",        0}},
        {0x04, {"iconst_1",        0}},
        {0x05, {"iconst_2",        0}},
        {0x06, {"iconst_3",        0}},
        {0x07, {"iconst_4",        0}},
        {0x08, {"iconst_5",        0}},
        {0x09, {"lconst_0",        0}},
        {0x0a, {"lconst_1",        0}},
        {0x0b, {"fconst_0",        0}},
        {0x0c, {"fconst_1",        0}},
        {0x0d, {"fconst_2",        0}},
        {0x0e, {"dconst_0",        0}},
        {0x0f, {"dconst_1",        0}},
        {0x10, {"bipush",          1}},
        {0x11, {"sipush",          2}},
        {0x12, {"ldc",             1}},
        {0x13, {"ldc_w",           2}},
        {0x14, {"ldc2_w",          2}},
        {0x15, {"iload",           1}},
        {0x16, {"lload",           1}},
        {0x17, {"fload",           1}},
        {0x18, {"dload",           1}},
        {0x19, {"aload",           1}},
        {0x1a, {"iload_0",         0}},
        {0x1b, {"iload_1",         0}},
        {0x1c, {"iload_2",         0}},
        {0x1d, {"iload_3",         0}},
        {0x1e, {"lload_0",         0}},
        {0x1f, {"lload_1",         0}},
        {0x20, {"lload_2",         0}},
        {0x21, {"lload_3",         0}},
        {0x22, {"fload_0",         0}},
        {0x23, {"fload_1",         0}},
        {0x24, {"fload_2",         0}},
        {0x25, {"fload_3",         0}},
        {0x26, {"dload_0",         0}},
        {0x27, {"dload_1",         0}},
        {0x28, {"dload_2",         0}},
        {0x29, {"dload_3",         0}},
        {0x2a, {"aload_0",         0}},
        {0x2b, {"aload_1",         0}},
        {0x2c, {"aload_2",         0}},
        {0x2d, {"aload_3",         0}},
        {0x2e, {"iaload",          0}},
        {0x2f, {"laload",          0}},
        {0x30, {"faload",          0}},
        {0x31, {"daload",          0}},
        {0x32, {"aaload",          0}},
        {0x33, {"baload",          0}},
        {0x34, {"caload",          0}},
        {0x35, {"saload",          0}},
        {0x36, {"istore",          1}},
        {0x37, {"lstore",          1}},
        {0x38, {"fstore",          1}},
        {0x39, {"dstore",          1}},
        {0x3a, {"astore",          1}},
        {0x3b, {"istore_0",        0}},
        {0x3c, {"istore_1",        0}},
        {0x3d, {"istore_2",        0}},
        {0x3e, {"istore_3",        0}},
        {0x3f, {"lstore_0",        0}},
        {0x40, {"lstore_1",        0}},
        {0x41, {"lstore_2",        0}},
        {0x42, {"lstore_3",        0}},
        {0x43, {"fstore_0",        0}},
        {0x44, {"fstore_1",        0}},
        {0x45, {"fstore_2",        0}},
        {0x46, {"fstore_3",        0}},
        {0x47, {"dstore_0",        0}},
        {0x48, {"dstore_1",        0}},
        {0x49, {"dstore_2",        0}},
        {0x4a, {"dstore_3",        0}},
        {0x4b, {"astore_0",        0}},
        {0x4c, {"astore_1",        0}},
        {0x4d, {"astore_2",        0}},
        {0x4e, {"astore_3",        0}},
        {0x4f, {"iastore",         0}},
        {0x50, {"lastore",         0}},
        {0x51, {"fastore",         0}},
        {0x52, {"dastore",         0}},
        {0x53, {"aastore",         0}},
        {0x54, {"bastore",         0}},
        {0x55, {"castore",         0}},
        {0x56, {"sastore",         0}},
        {0x57, {"pop",             0}},
        {0x58, {"pop2",            0}},
        {0x59, {"dup",             0}},
        {0x5a, {"dup_x1",          0}},
        {0x5b, {"dup_x2",          0}},
        {0x5c, {"dup2",            0}},
        {0x5d, {"dup2_x1",         0}},
        {0x5e, {"dup2_x2",         0}},
        {0x5f, {"swap",            0}},
        {0x60, {"iadd",            0}},
        {0x61, {"ladd",            0}},
        {0x62, {"fadd",            0}},
        {0x63, {"dadd",            0}},
        {0x64, {"isub",            0}},
        {0x65, {"lsub",            0}},
        {0x66, {"fsub",            0}},
        {0x67, {"dsub",            0}},
        {0x68, {"imul",            0}},
        {0x69, {"lmul",            0}},
        {0x6a, {"fmul",            0}},
        {0x6b, {"dmul",            0}},
        {0x6c, {"idiv",            0}},
        {0x6d, {"ldiv",            0}},
        {0x6e, {"fdiv",            0}},
        {0x6f, {"ddiv",            0}},
        {0x70, {"irem",            0}},
        {0x71, {"lrem",            0}},
        {0x72, {"frem",            0}},
        {0x73, {"drem",            0}},
        {0x74, {"ineg",            0}},
        {0x75, {"lneg",            0}},
        {0x76, {"fneg",            0}},
        {0x77, {"dneg",            0}},
        {0x78, {"ishl",            0}},
        {0x79, {"lshl",            0}},
        {0x7a, {"ishr",            0}},
        {0x7b, {"lshr",            0}},
        {0x7c, {"iushr",           0}},
        {0x7d, {"lushr",           0}},
        {0x7e, {"iand",            0}},
        {0x7f, {"land",            0}},
        {0x80, {"ior",             0}},
        {0x81, {"lor",             0}},
        {0x82, {"ixor",            0}},
        {0x83, {"lxor",            0}},
        {0x84, {"iinc",            2}},
        {0x85, {"i2l",             0}},
        {0x86, {"i2f",             0}},
        {0x87, {"i2d",             0}},
        {0x88, {"l2i",             0}},
        {0x89, {"l2f",             0}},
        {0x8a, {"l2d",             0}},
        {0x8b, {"f2i",             0}},
        {0x8c, {"f2l",             0}},
        {0x8d, {"f2d",             0}},
        {0x8e, {"d2i",             0}},
        {0x8f, {"d2l",             0}},
        {0x90, {"d2f",             0}},
        {0x91, {"i2b",             0}},
        {0x92, {"i2c",             0}},
        {0x93, {"i2s",             0}},
        {0x94, {"lcmp",            0}},
        {0x95, {"fcmpl",           0}},
        {0x96, {"fcmpg",           0}},
        {0x97, {"dcmpl",           0}},
        {0x98, {"dcmpg",           0}},
        {0x99, {"ifeq",            2}},
        {0x9a, {"ifne",            2}},
        {0x9b, {"iflt",            2}},
        {0x9c, {"ifge",            2}},
        {0x9d, {"ifgt",            2}},
        {0x9e, {"ifle",            2}},
        {0x9f, {"if_icmpeq",       2}},
        {0xa0, {"if_icmpne",       2}},
        {0xa1, {"if_icmplt",       2}},
        {0xa2, {"if_icmpge",       2}},
        {0xa3, {"if_icmpgt",       2}},
        {0xa4, {"if_icmple",       2}},
        {0xa5, {"if_acmpeq",       2}},
        {0xa6, {"if_acmpne",       2}},
        {0xa7, {"goto",            2}},
        {0xa8, {"jsr",             2}},
        {0xa9, {"ret",             1}},
        {0xaa, {"tableswitch",     -1}},        // va_args
        {0xab, {"lookupswitch",    -2}},    // va_args
        {0xac, {"ireturn",         0}},
        {0xad, {"lreturn",         0}},
        {0xae, {"freturn",         0}},
        {0xaf, {"dreturn",         0}},
        {0xb0, {"areturn",         0}},
        {0xb1, {"return",          0}},
        {0xb2, {"getstatic",       2}},
        {0xb3, {"putstatic",       2}},
        {0xb4, {"getfield",        2}},
        {0xb5, {"putfield",        2}},
        {0xb6, {"invokevirtual",   2}},
        {0xb7, {"invokespecial",   2}},
        {0xb8, {"invokestatic",    2}},
        {0xb9, {"invokeinterface", 4}},    // 4.
        {0xba, {"invokedynamic",   4}},    // 4.
        {0xbb, {"new",             2}},
        {0xbc, {"newarray",        1}},
        {0xbd, {"anewarray",       2}},
        {0xbe, {"arraylength",     0}},
        {0xbf, {"athrow",          0}},
        {0xc0, {"checkcast",       2}},
        {0xc1, {"instanceof",      2}},
        {0xc2, {"monitorenter",    0}},
        {0xc3, {"monitorexit",     0}},
        {0xc4, {"wide",            -3}},            // length 3 or 5. [extend local variable index]
        {0xc5, {"multianewarray",  3}},    // 3.
        {0xc6, {"ifnull",          2}},
        {0xc7, {"ifnonnull",       2}},
        {0xc8, {"goto_w",          4}},            // 4.
        {0xc9, {"jsr_w",           4}},            // 4.
        {0xca, {"breakpoint",      0}},
        {0xfe, {"impdep1",         0}},
        {0xff, {"impdep2",         0}},
};

static std::unordered_map<String, int> attribute_table{
        {L"ConstantValue",                        0},
        {L"Code",                                 1},
        {L"StackMapTable",                        2},
        {L"Exceptions",                           3},
        {L"InnerClasses",                         4},
        {L"EnclosingMethod",                      5},
        {L"Synthetic",                            6},
        {L"Signature",                            7},
        {L"SourceFile",                           8},
        {L"SourceDebugExtension",                 9},
        {L"LineNumberTable",                      10},
        {L"LocalVariableTable",                   11},
        {L"LocalVariableTypeTable",               12},
        {L"Deprecated",                           13},
        {L"RuntimeVisibleAnnotations",            14},
        {L"RuntimeInvisibleAnnotations",          15},
        {L"RuntimeVisibleParameterAnnotations",   16},
        {L"RuntimeInvisibleParameterAnnotations", 17},
        {L"RuntimeVisibleTypeAnnotations",        18},
        {L"RuntimeInvisibleTypeAnnotations",      19},
        {L"AnnotationDefault",                    20},
        {L"BootstrapMethods",                     21},
        {L"MethodParameters",                     22},
};

//=====
#define CONSTANT_Class                7
#define CONSTANT_Fieldref            9
#define CONSTANT_Methodref            10
#define CONSTANT_InterfaceMethodref    11
#define CONSTANT_String                8
#define CONSTANT_Integer                3
#define CONSTANT_Float                4
#define CONSTANT_Long                5
#define CONSTANT_Double                6
#define CONSTANT_NameAndType            12
#define CONSTANT_Utf8                1
#define CONSTANT_MethodHandle        15
#define CONSTANT_MethodType            16
#define CONSTANT_InvokeDynamic        18

#endif //TINY_JVM_CONST_H
